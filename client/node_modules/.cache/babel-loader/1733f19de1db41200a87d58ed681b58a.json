{"ast":null,"code":"import { takeEvery } from 'redux-saga/effects';\nimport { collectionsSnapshotToMap, firestore } from '../../firebase/firebase.utils';\nimport { fetchCollectionsSuccess, fetchCollectionFailure } from './shop.actions';\nimport ShopActionTypes from './shop.types';\nexport function* fetchCollectionsAsync() {\n  try {\n    const collectionRef = firestore.collection('collections');\n    const snapshot = yield collectionRef.get();\n    const collectionsMap = yield call(collectionsSnapshotToMap, snapshot);\n    yield put(fetchCollectionsSuccess(collectionsMap));\n  } catch (error) {\n    yield put(fetchCollectionFailure(error.message));\n  }\n\n  const collectionRef = firestore.collection('collections');\n  dispatch(fetchCollectionsStart());\n  collectionRef.get().then(snapshot => {\n    const collectionsMap = collectionsSnapshotToMap(snapshot);\n    dispatch(fetchCollectionsSuccess(collectionsMap));\n  }).catch(error => dispatch(fetchCollectionFailure(error.message)));\n}\nexport function* fetchCollectionsStart() {\n  yield takeEvery(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}","map":{"version":3,"sources":["D:/Code/Web Projects/crown-clothing/src/redux/shop/shop.sagas.js"],"names":["takeEvery","collectionsSnapshotToMap","firestore","fetchCollectionsSuccess","fetchCollectionFailure","ShopActionTypes","fetchCollectionsAsync","collectionRef","collection","snapshot","get","collectionsMap","call","put","error","message","dispatch","fetchCollectionsStart","then","catch","FETCH_COLLECTIONS_START"],"mappings":"AAAA,SAASA,SAAT,QAA0B,oBAA1B;AAEA,SAAUC,wBAAV,EAAoCC,SAApC,QAAqD,+BAArD;AACA,SAASC,uBAAT,EAAkCC,sBAAlC,QAAgE,gBAAhE;AAEA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,OAAO,UAAUC,qBAAV,GAAkC;AAErC,MAAI;AACA,UAAMC,aAAa,GAAGL,SAAS,CAACM,UAAV,CAAqB,aAArB,CAAtB;AACA,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB;AACA,UAAMC,cAAc,GAAG,MAAMC,IAAI,CAC7BX,wBAD6B,EAE7BQ,QAF6B,CAAjC;AAIA,UAAMI,GAAG,CAACV,uBAAuB,CAACQ,cAAD,CAAxB,CAAT;AACH,GARD,CAQE,OAAMG,KAAN,EAAa;AACX,UAAMD,GAAG,CAACT,sBAAsB,CAACU,KAAK,CAACC,OAAP,CAAvB,CAAT;AACH;;AAED,QAAMR,aAAa,GAAGL,SAAS,CAACM,UAAV,CAAqB,aAArB,CAAtB;AACAQ,EAAAA,QAAQ,CAACC,qBAAqB,EAAtB,CAAR;AACAV,EAAAA,aAAa,CAACG,GAAd,GACCQ,IADD,CACOT,QAAQ,IAAI;AACf,UAAME,cAAc,GAAGV,wBAAwB,CAACQ,QAAD,CAA/C;AACAO,IAAAA,QAAQ,CAACb,uBAAuB,CAACQ,cAAD,CAAxB,CAAR;AACH,GAJD,EAKCQ,KALD,CAKQL,KAAK,IAAIE,QAAQ,CAACZ,sBAAsB,CAACU,KAAK,CAACC,OAAP,CAAvB,CALzB;AAMH;AAED,OAAO,UAAUE,qBAAV,GAAkC;AACrC,QAAMjB,SAAS,CACXK,eAAe,CAACe,uBADL,EAEXd,qBAFW,CAAf;AAIH","sourcesContent":["import { takeEvery } from 'redux-saga/effects';\r\n\r\nimport {  collectionsSnapshotToMap, firestore } from '../../firebase/firebase.utils';\r\nimport { fetchCollectionsSuccess, fetchCollectionFailure } from './shop.actions';\r\n\r\nimport ShopActionTypes from './shop.types';\r\n\r\nexport function* fetchCollectionsAsync() {\r\n\r\n    try {\r\n        const collectionRef = firestore.collection('collections');\r\n        const snapshot = yield collectionRef.get();\r\n        const collectionsMap = yield call(\r\n            collectionsSnapshotToMap,\r\n            snapshot\r\n        );\r\n        yield put(fetchCollectionsSuccess(collectionsMap));\r\n    } catch(error) {\r\n        yield put(fetchCollectionFailure(error.message))\r\n    }\r\n\r\n    const collectionRef = firestore.collection('collections');\r\n    dispatch(fetchCollectionsStart());\r\n    collectionRef.get()\r\n    .then( snapshot => {\r\n        const collectionsMap = collectionsSnapshotToMap(snapshot);\r\n        dispatch(fetchCollectionsSuccess(collectionsMap))\r\n    })\r\n    .catch( error => dispatch(fetchCollectionFailure(error.message)))\r\n}\r\n\r\nexport function* fetchCollectionsStart() {\r\n    yield takeEvery(\r\n        ShopActionTypes.FETCH_COLLECTIONS_START,\r\n        fetchCollectionsAsync\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}