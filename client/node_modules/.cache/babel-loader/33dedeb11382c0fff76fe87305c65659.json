{"ast":null,"code":"var _jsxFileName = \"D:\\\\Code\\\\Web Projects\\\\crown-clothing\\\\src\\\\components\\\\sign-in\\\\sign-in.component.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport './sign-in.styles.scss';\nimport FormInput from '../../components/form-input/form-input.component';\nimport CustomButton from '../../components/custom-button/custom-button.component';\nimport { googleSignInStart, emailSignInStart } from '../../redux/user/user.actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SignIn = ({\n  emailSignInStart,\n  googleSignInStart\n}) => {\n  _s();\n\n  const [userCredentials, setCredentials] = useState({\n    email: '',\n    password: ''\n  });\n  const {\n    email,\n    password\n  } = userCredentials;\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    emailSignInStart(email, password);\n  };\n\n  const handleChange = e => {\n    const {\n      value,\n      name\n    } = e.target;\n    setCredentials({ ...userCredentials,\n      [name]: value\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sign-in\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"I alredy have an account\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"Sign in with email\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(FormInput, {\n        label: \"email\",\n        name: \"email\",\n        type: \"email\",\n        handleChange: handleChange,\n        value: email,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(FormInput, {\n        id: \"password\",\n        name: \"password\",\n        type: \"password\",\n        handleChange: handleChange,\n        value: password,\n        required: true,\n        label: \"password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons\",\n        children: [/*#__PURE__*/_jsxDEV(CustomButton, {\n          type: \"submit\",\n          onClick: handleSubmit,\n          children: \" Sign In \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(CustomButton, {\n          type: \"button\",\n          onClick: googleSignInStart,\n          isGoogleSignIn: true,\n          children: \" Sign in with GG \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SignIn, \"eHr/Wc7ClsgLq6iRabgK+FSo+NE=\");\n\n_c = SignIn;\n\nconst mapDispatchToProps = dispatch => ({\n  googleSignInStart: () => dispatch(googleSignInStart()),\n  emailSignInStart: (email, password) => dispatch(emailSignInStart({\n    email,\n    password\n  }))\n});\n\nexport default connect(null, mapDispatchToProps)(SignIn);\n\nvar _c;\n\n$RefreshReg$(_c, \"SignIn\");","map":{"version":3,"sources":["D:/Code/Web Projects/crown-clothing/src/components/sign-in/sign-in.component.jsx"],"names":["React","useState","connect","FormInput","CustomButton","googleSignInStart","emailSignInStart","SignIn","userCredentials","setCredentials","email","password","handleSubmit","e","preventDefault","handleChange","value","name","target","mapDispatchToProps","dispatch"],"mappings":";;;AAAA,OAAOA,KAAP,IAAiBC,QAAjB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAO,uBAAP;AAEA,OAAOC,SAAP,MAAsB,kDAAtB;AACA,OAAOC,YAAP,MAAyB,wDAAzB;AAEA,SAASC,iBAAT,EAA4BC,gBAA5B,QAAoD,+BAApD;;;AAEA,MAAMC,MAAM,GAAE,CAAC;AAACD,EAAAA,gBAAD;AAAmBD,EAAAA;AAAnB,CAAD,KAA2C;AAAA;;AACrD,QAAM,CAACG,eAAD,EAAkBC,cAAlB,IAAoCR,QAAQ,CAAC;AAACS,IAAAA,KAAK,EAAC,EAAP;AAAWC,IAAAA,QAAQ,EAAE;AAArB,GAAD,CAAlD;AAEA,QAAM;AAACD,IAAAA,KAAD;AAAQC,IAAAA;AAAR,MAAmBH,eAAzB;;AACA,QAAMI,YAAY,GAAG,MAAMC,CAAN,IAAW;AAC5BA,IAAAA,CAAC,CAACC,cAAF;AAEAR,IAAAA,gBAAgB,CAACI,KAAD,EAAQC,QAAR,CAAhB;AACH,GAJD;;AAMA,QAAMI,YAAY,GAAGF,CAAC,IAAI;AACtB,UAAM;AAACG,MAAAA,KAAD;AAAQC,MAAAA;AAAR,QAAgBJ,CAAC,CAACK,MAAxB;AAEAT,IAAAA,cAAc,CAAC,EAAC,GAAGD,eAAJ;AAAqB,OAACS,IAAD,GAAQD;AAA7B,KAAD,CAAd;AACH,GAJD;;AAKA,sBACI;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA,4BACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADA,eAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFA,eAIA;AAAA,8BACI,QAAC,SAAD;AAAW,QAAA,KAAK,EAAC,OAAjB;AAAyB,QAAA,IAAI,EAAC,OAA9B;AAAsC,QAAA,IAAI,EAAC,OAA3C;AAAmD,QAAA,YAAY,EAAED,YAAjE;AAA+E,QAAA,KAAK,EAAEL,KAAtF;AAA6F,QAAA,QAAQ;AAArG;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,SAAD;AACI,QAAA,EAAE,EAAC,UADP;AAEI,QAAA,IAAI,EAAC,UAFT;AAGI,QAAA,IAAI,EAAC,UAHT;AAII,QAAA,YAAY,EAAEK,YAJlB;AAKI,QAAA,KAAK,EAAEJ,QALX;AAMI,QAAA,QAAQ,MANZ;AAOI,QAAA,KAAK,EAAC;AAPV;AAAA;AAAA;AAAA;AAAA,cAFJ,eAWI;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA,gCAEI,QAAC,YAAD;AAAc,UAAA,IAAI,EAAC,QAAnB;AAA4B,UAAA,OAAO,EAAEC,YAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI,QAAC,YAAD;AAAc,UAAA,IAAI,EAAC,QAAnB;AAA4B,UAAA,OAAO,EAAEP,iBAArC;AAAwD,UAAA,cAAc,MAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAXJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAJA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAyBH,CAxCD;;GAAME,M;;KAAAA,M;;AA0CN,MAAMY,kBAAkB,GAAGC,QAAQ,KAAK;AACpCf,EAAAA,iBAAiB,EAAE,MAAMe,QAAQ,CAACf,iBAAiB,EAAlB,CADG;AAEpCC,EAAAA,gBAAgB,EAAE,CAACI,KAAD,EAAQC,QAAR,KAAqBS,QAAQ,CAACd,gBAAgB,CAAC;AAACI,IAAAA,KAAD;AAAQC,IAAAA;AAAR,GAAD,CAAjB;AAFX,CAAL,CAAnC;;AAKA,eAAeT,OAAO,CAAC,IAAD,EAAOiB,kBAAP,CAAP,CAAkCZ,MAAlC,CAAf","sourcesContent":["import React , { useState } from 'react';\r\nimport { connect } from 'react-redux'\r\n\r\nimport './sign-in.styles.scss';\r\n\r\nimport FormInput from '../../components/form-input/form-input.component';\r\nimport CustomButton from '../../components/custom-button/custom-button.component';\r\n\r\nimport { googleSignInStart, emailSignInStart } from '../../redux/user/user.actions';\r\n\r\nconst SignIn= ({emailSignInStart, googleSignInStart}) => {\r\n    const [userCredentials, setCredentials] = useState({email:'', password: ''});\r\n\r\n    const {email, password}= userCredentials;\r\n    const handleSubmit = async e => {\r\n        e.preventDefault();\r\n\r\n        emailSignInStart(email, password)\r\n    }\r\n\r\n    const handleChange = e => {\r\n        const {value, name} = e.target;\r\n\r\n        setCredentials({...userCredentials, [name]: value})\r\n    }\r\n    return (\r\n        <div className='sign-in'>\r\n        <h2>I alredy have an account</h2>\r\n        <span>Sign in with email</span>\r\n        \r\n        <form>\r\n            <FormInput label='email' name='email' type='email' handleChange={handleChange} value={email} required/>\r\n            <FormInput \r\n                id='password' \r\n                name='password' \r\n                type='password' \r\n                handleChange={handleChange}\r\n                value={password} \r\n                required\r\n                label='password'\r\n            />\r\n            <div className='buttons'>\r\n\r\n                <CustomButton type='submit' onClick={handleSubmit} > Sign In </CustomButton>\r\n                <CustomButton type='button' onClick={googleSignInStart} isGoogleSignIn > Sign in with GG </CustomButton>\r\n            </div>\r\n        </form>\r\n    </div>\r\n    )\r\n        \r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    googleSignInStart: () => dispatch(googleSignInStart()),\r\n    emailSignInStart: (email, password) => dispatch(emailSignInStart({email, password}))\r\n})\r\n\r\nexport default connect(null, mapDispatchToProps)(SignIn);"]},"metadata":{},"sourceType":"module"}